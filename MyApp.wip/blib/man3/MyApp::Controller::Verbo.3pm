.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MyApp::Controller::Verbo 3"
.TH MyApp::Controller::Verbo 3 "2017-10-31" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MyApp::Controller::Verbo \- Catalyst Controller
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Catalyst Controller.
.SH "METHODS"
.IX Header "METHODS"
.SS "index"
.IX Subsection "index"
.SS "list"
.IX Subsection "list"
.Vb 1
\&    List of all Verbs
.Ve
.SS "argsNumCatTree"
.IX Subsection "argsNumCatTree"
.SS "argsOrdCatTree"
.IX Subsection "argsOrdCatTree"
.SS "lemmaNumCatTree"
.IX Subsection "lemmaNumCatTree"
sub lemmaNumCatTree : Local {
    my ( \f(CW$self\fR, \f(CW$c\fR, \f(CW$lemma\fR ) = \f(CW@_\fR;
.PP
.Vb 2
\&    my $byArgsCase = $c\->model(\*(AqDB::Forma\*(Aq)\->search( { \*(Aqme.lemma\*(Aq => $lemma },
\&        { join => [ \*(Aqargscats\*(Aq, \*(Aqverbarguments\*(Aq ], } );
\&
\&    my $byArgsCaseCount = $byArgsCase\->search(
\&        { \*(Aqme.lemma\*(Aq => $lemma, \*(Aqverbarguments.root_id\*(Aq => { \*(Aq!=\*(Aq, undef } },
\&        {
\&            select => [
\&                \*(Aqargscats.argscard\*(Aq,
\&                \*(Aqargscats.argsSet\*(Aq,
\&                \*(Aqverbarguments.rCase\*(Aq,
\&                \e\*(AqCOUNT(verbarguments.root_id) AS occs\*(Aq,
\&                \e\*(AqCOUNT( DISTINCT verbarguments.root_id) AS t_occs\*(Aq
\&            ],
\&            as       => [ \*(AqargsCard\*(Aq, \*(AqargsSet\*(Aq, \*(Aqcaso\*(Aq, \*(Aqoccs\*(Aq, \*(Aqt_occs\*(Aq ],
\&            group_by => [ \*(AqargsCard\*(Aq, \*(AqargsSet\*(Aq, \*(AqrCase\*(Aq ],
\&            order_by => [ \*(AqargsCard\*(Aq, \*(AqargsSet\*(Aq, \*(AqrCase\*(Aq ]
\&        }
\&    );
\&
\&    my @nodes = @{ argsNumCatTree( $self, $c, $lemma ) };
\&
\&    my ( $cat, $cat1 );
\&    my ( $n, $n1, $n2 );
\&    $n2 = $byArgsCaseCount\->next;
\&    for $n (@nodes) {
\&        next if ( $n\->{\*(AqargsCard\*(Aq} == 0 );
\&        for $n1 ( @{ $n\->{\*(Aqchildren\*(Aq} } ) {
\&            $cat  = $n1\->{\*(AqargsCard\*(Aq};
\&            $cat1 = $n1\->{\*(AqargsSet\*(Aq};
\&
\&            my @nodes2 = ();
\&            my ( $cat2, $num2 );
\&
\&            while ($n2) {
\&                last
\&                  if ( $n2\->get_column(\*(AqargsCard\*(Aq) ne $cat
\&                    || $n2\->get_column(\*(AqargsSet\*(Aq) ne $cat1 );
\&                $cat2 = $n2\->get_column(\*(Aqcaso\*(Aq);
\&                $num2 = $n2\->get_column(\*(Aqoccs\*(Aq);
\&                my $num_1 = $n2\->get_column(\*(Aqt_occs\*(Aq);
\&                push(
\&                    @nodes2,
\&                    {
\&                        argsCard => $cat,
\&                        argsSet  => $cat1,
\&                        caso     => $cat2,
\&                        occs     => $num2,
\&                        t_occs   => $num_1,
\&                    }
\&                );
\&                $n2 = $byArgsCaseCount\->next;
\&            }
\&
\&            $n1\->{\*(Aqchildren\*(Aq} = \e@nodes2;
\&        }
\&    }
\&
\&    return \e@nodes;
\&}
.Ve
.SS "lemmaFillers"
.IX Subsection "lemmaFillers"
.SS "catIndexTree Indice delle categorie per lemma, mediante tree di Json"
.IX Subsection "catIndexTree Indice delle categorie per lemma, mediante tree di Json"
.SH "AUTHOR"
.IX Header "AUTHOR"
Paolo Ruffolo
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 327:" 4
.IX Item "Around line 327:"
Unknown directive: =h
